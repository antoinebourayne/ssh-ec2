#!/usr/bin/env bash
# Create a ephemeral AWS EC2 instance to execute an SSH command.
#
# The script synchronize the current working directory before execute the SSH.
# After the SSH session, the data will be resynchronized back, and
# the instance can be leave, stop or terminate.
# The selected region MUST have a key-pair with username, and the AWS user MUST have the privilege
# to create and destroy instances.
#
# Author: Philippe PRADOS (ppr@octo.com)

# Usage (See README.md):
# ssh-ec2 [-lsr|--leave|--stop|--terminate] [-daf|--detach|--attach|--finish] [--no-rsync] \
# [--multi <tmux|screen|none>] \
# [-i <pem file>] [-[LR] port:host:port] [cmds*]
#
# --terminate : create and start EC2, launch a command in ssh session, and remove EC2 instance and all datas after the end of ssh session.
# --stop      : create and start EC2, launch a command in ssh session, and stop EC2 instance after the end of ssh session.
# --leave     : create and start EC2, launch a command in ssh session, and leave EC2 instance alive
# --detach    : create and start EC2, launch a command in ssh session, detach the session, and leave EC2 instance alive
# --attach    : attach a session
# --no-rsync  : Never synchronize files
# --quiet     : Silent when rsync files
# --verbose   : Print synchronized files when rsync

# Samples:
# ./ssh-ec2 --terminate "source activate cntk_p36 ; make train" # Return when finished
# ./ssh-ec2 --detach    "source activate cntk_p36 ; make train" # Return immediately
# ./ssh-ec2 --detach    "while sleep 1; do echo thinking; done"
# ./ssh-ec2 --attach    "while sleep 1; do echo thinking; done"

# Environment:
# - USER              : tag will be created with username
# - TRIGRAM           : user trigram (optional)
# - AWS_PEM           : PEM file path to connect to AWS with SSH
#                       or add your key with ssh-add ~/.ssh/id_rsa
#                       or use -i pemfile.pem in command line (optional if the key was added with ssh-add)
# - AWS_INSTANCE_TYPE : Instance type (default: p2.xlarge)
# - AWS_REGION        : Region (default: $AWS_DEFAULT_REGION or eu-central-1)
# - AWS_KEY_NAME      : Pair key name in AWS. default $USER
# - AWS_IMAGE_NAME    : Name of image. Default: "Deep Learning AMI (Ubuntu) Version *"
# - AWS_IMAGE_ID      : ami-image. Default: Search with $AWS_IMAGE_NAME
# - AWS_USER_DATA     : Script to execute just after create the EC2 instance.
# - AWS_NAME_INSTANCE : Name of the AWS EC2 instance. Default: $AWS_KEY_NAME-<current working directory>-$AWS_KEY_NAME
# - AWS_SECURITY_GROUP: Name of security group (default: SshEc2 or $AWS_NAME_INSTANCE)
# - AWS_RSYNC_DIR     : Target directory in AWS EC2 instance. Default: basename of current directory
# - AWS_INSTANCE_USER : default user name in image (default:Calculate with the AWS_IMAGE_NAME)
# - AWS_FINAL_STATE   : Final state. Must be leave, destroy or stop. Default: destroy
# - MULTIPLEX         : tmux (default) or screen or empty (setmuxe http://hyperpolyglot.org/multiplexers)

# File
# - .rsyncignore      : list of directories to ignore when synchronize files with rsync
# - .env              : Environment variables. Lower priority.

set -e # Detect all errors
shopt -s extglob

# Defautl security group
[[ -z "${CREATE_SECURITY_GROUP}" ]] && CREATE_SECURITY_GROUP=no
[[ -z "${AWS_SECURITY_GROUP}" ]] && AWS_SECURITY_GROUP=SshEC2

# ----------- For debug
if [[ "${DEBUG}" == y ]]; then
  #AWS_DRY= --dryrun
  #AWS_INSTANCE_TYPE=t2.small
  #AWS_INSTANCE_TYPE=t2.medium
  #AWS_IMAGE_NAME="Amazon Linux AMI*"

  if [[ -z "$AWS_FINAL_STATE" ]]; then
    AWS_FINAL_STATE=leave
  fi
  #NO_RSYNC_BEGIN=y
  #NO_RSYNC_END=y
fi
# ----------- End For debug

# ----------- Manage colors
if test -t 1; then

    # see if it supports colors...
    ncolors=$(tput colors)

    if test -n "$ncolors" && test $ncolors -ge 8; then
        normal="$(tput sgr0)"
        red="$(tput setaf 1)"
        green="$(tput setaf 2)"
        yellow="$(tput setaf 3)"
        gray="$(tput setaf 8)"
    fi
fi


# ----------- Manage .env
# Set only undefined variables. .env have lower priority
# For debug, replace '.' by 'cat'
if [ -e .env ] ; then
    temp_file=$(mktemp)
    cat <( grep -v '^#' .env  | while read line; do
        key=$(echo $line | cut -d '=' -f 1)
        if [[ ! -z "$key" && -z "${!key}" ]]; then
            echo $line | sed -E "s/=(.*)/='\1'/"
        fi
        done
        ) >$temp_file
    . $temp_file
    rm $temp_file
fi

# ----------- Check presence of others tools
if  [[ "$(which aws)" == ""  ]]; then
    echo -e "${red}ERROR${normal}: Install AWS CLI before use ssh-ec2 (https://tinyurl.com/yd4ru2nu)" >&2
    exit 1
fi

if  [[ "$(which jq)" == ""  ]]; then
    echo -e "${red}ERROR${normal}: Install jq before use ssh-ec2" >&2
    exit 1
fi

# ----------- Defaults values
_DEFAULT_FINAL_STATE=terminate
_DEFAULT_REGION=eu-central-1
_DEFAULT_INSTANCE_TYPE=p2.xlarge
_DEFAULT_MULTIPLEX=
_DEFAULT_IMAGE_NAME="Deep Learning AMI (Ubuntu)*"
_DEFAULT_IAM_INSTANCE_PROFILE="EC2ReadOnlyAccessToS3"
_DEFAULT_RSYNC_QUIET=--quiet
_DEFAULT_USER_DATA="sudo locale-gen $(locale | grep LANG= | cut -d '=' -f 2);"
_DEFAULT_SECURITY_GROUP=SshEC2

# ----------- Manage .ssh/config
if [[ -e ~/.aws/config ]] ;  then
    default_user_region=$(cat ~/.aws/config | grep -v '^#' | grep region | cut -d '=' -f 2)
    if [[ ! -z ${default_user_region} ]] ; then
        _DEFAULT_REGION=${default_user_region}
    fi
fi

declare -a TAGS # The user can set somme additional tags with syntax 'key::value'
RSYNC_QUIET=${_DEFAULT_RSYNC_QUIET}

# ----------- Analyse parameters

function arg_leave() {
    AWS_FINAL_STATE=leave
}

function arg_stop() {
    AWS_FINAL_STATE=stop
}

function arg_terminate() {
    AWS_FINAL_STATE=terminate
}

function arg_detach() {
    AWS_FINAL_STATE=leave
    SSH_DETACH=y
    [ -z "$MULTIPLEX" ] && MULTIPLEX=tmux
}

function arg_attach() {
    MULTIPLEX=tmux
    AWS_FINAL_STATE=leave
    NO_RSYNC_BEGIN=y
    NO_RSYNC_END=y
}

function arg_finish() {
    MULTIPLEX=tmux
    NO_RSYNC_BEGIN=y
}

function arg_multiplex() {
    MULTIPLEX=$1
    if [ "$MULTIPLEX" == none ] ; then MULTIPLEX="" ; fi
}

function arg_L() {
    SSH_PARAMS="${SSH_PARAMS} -L $1"
}

function arg_R() {
    SSH_PARAMS="${SSH_PARAMS} -R $1"
}

function arg_i() {
    PEM_SSH="-i $1"
}

function arg_no_rsync() {
    NO_RSYNC_BEGIN=y
    NO_RSYNC_END=y
}

function arg_verbose() {
    RSYNC_QUIET=
}

function arg_help() {
    echo -e "ssh-ec2 [-lsr|--leave|--stop|--terminate] [-daf|--detach|--attach|--finish] [--no-rsync] \\ \n" \
        "[--multi <tmux|screen|none>] \\ \n" \
        "[-i <pem file>] [-[LR] port:host:port] [cmds*]"
    echo "Samples:"
    echo "${green}ssh-ec2 make          ${gray}# Create, sync, execute, sync and terminate instance"
    echo "${green}ssh-ec2 --detach make ${gray}# Create, sync, execute in bg and detach session"
    echo "${green}ssh-ec2 --attach      ${gray}# Attach current session"
    echo "${green}ssh-ec2 --finish      ${gray}# Attach, rsync and terminate instance EC2"
    echo "${green}ssh-ec2 --stop make   ${gray}# Create, sync, execute, sync and save instance EC2"
    echo "${green}ssh-ec2 --leave       ${gray}# Create, sync, execute${normal}"
    exit 0
}

optspec=":lstdafL:R:i:vh-:"
while getopts "$optspec" optchar; do
    case "${optchar}" in
        -)
            case "${OPTARG}" in
                leave)
                    arg_leave
                    ;;
                stop)
                    arg_stop
                    ;;
                terminate)
                    arg_terminate
                    ;;
                detach)
                    arg_detach
                    ;;
                attach)
                    arg_attach
                    ;;
                finish)
                    arg_finish
                    ;;
                multi|multiplex)
                    arg_multiplex $2
                    shift
                    ;;
                no-rsync)
                    arg_no_rsync
                    ;;
                verbose)
                    arg_verbose
                    ;;
                help)
                    arg_help
                    ;;
                debug)
                    DEBUG=y
                    ;;
                *)
                    if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
                        echo -e "${red}Unknown option --${OPTARG} ${normal}" >&2
                    fi
                    ;;
            esac;;
        l)
            arg_leave
            ;;
        s)
            arg_stop
            ;;
        t)
            arg_terminate
            ;;
        d)
            arg_detach
            ;;
        a)
            arg_attach
            ;;
        f)
            arg_finish
            ;;
        L)
            arg_L  ${OPTARG}
            ;;
        R)
            arg_R ${OPTARG}
            ;;
        i)
            arg_i ${OPTARG}
            ;;
        v)
            arg_verbose
            ;;
        h)
            arg_help
            ;;
        *)
            if [ "$OPTERR" != 1 ] || [ "${optspec:0:1}" = ":" ]; then
                echo -e "${red}Non-option argument: '-${OPTARG}'${normal}" >&2
            fi
            ;;
    esac
done

shift $((OPTIND-1))

shopt -s nocasematch

# ---

CWBD=$(basename "$(pwd)")
if [[ -z "${AWS_KEY_NAME}" ]] ; then
    if [[ ! -z "${TRIGRAM}" ]] ; then
      AWS_KEY_NAME=${TRIGRAM}
    else
      AWS_KEY_NAME=${USER}
    fi
fi

if [[ -z "${AWS_NAME_INSTANCE}" ]] ; then
  AWS_NAME_INSTANCE=${AWS_KEY_NAME}-${CWBD}
fi
if [[ -z "${AWS_SECURITY_GROUP}" ]] ; then
  AWS_SECURITY_GROUP=ssh-ec2-${AWS_NAME_INSTANCE}
fi


AWS_NAME_INSTANCE=${AWS_NAME_INSTANCE=${AWS_NAME_INSTANCE}}
AWS_RSYNC_DIR=${AWS_RSYNC_DIR=${CWBD}}
AWS_IAM_INSTANCE_PROFILE=${AWS_IAM_INSTANCE_PROFILE=${_DEFAULT_IAM_INSTANCE_PROFILE}}
AWS_SECURITY_GROUP=${AWS_SECURITY_GROUP=${_DEFAULT_SECURITY_GROUP}}

if [[ ! -z "${AWS_IAM_INSTANCE_PROFILE}" ]] ; then
    AWS_IAM_INSTANCE_PROFILE="--iam-instance-profile Name=${AWS_IAM_INSTANCE_PROFILE}"
else
    AWS_IAM_INSTANCE_PROFILE=""
fi
AWS_REGION=${AWS_REGION=${_DEFAULT_REGION}}

AWS_IMAGE_NAME=${AWS_IMAGE_NAME=${_DEFAULT_IMAGE_NAME}}
AWS_LAST_KNOW_IMAGE_ID=$(aws --region ${AWS_REGION} ec2 describe-images \
  --filters "Name=name,Values=${AWS_IMAGE_NAME}"  \
  --output json | jq -r '.Images | sort_by(.CreationDate) | last(.[]).ImageId')
if [[ "${AWS_LAST_KNOW_IMAGE_ID}" == null ]] ; then
    echo "${red}ERROR${normal}: Impossible to find the '${AWS_IMAGE_NAME}' AMI" >&2
    exit 1
fi

AWS_IMAGE_ID=${AWS_IMAGE_ID=${AWS_LAST_KNOW_IMAGE_ID}}
check=${AWS_IMAGE_ID?Image not found in the region ${AWS_REGION}}

# Try to find the default username
# See https://alestic.com/2014/01/ec2-ssh-username/
declare -a _default_user
_default_user=(
'Amazon Linux::ec2-user'
'ubuntu::ubuntu'
'RHEL 6.[0-3]::root'
'RHEL 6.[0-9]+::ec2-user'
'Fedora::fedora'
'Centos::centos'
'SUSE::ec2-user'
'BitNami::bitnami'
'TurnKey::root'
'NanoStack::ubuntu'
'FreeBSD::ec2-user'
'OmniOS::root'
)

if [[ -z "${AWS_INSTANCE_USER}" ]]; then
    for index in "${_default_user[@]}" ; do
        K="${index%%::*}"
        V="${index##*::}"
        if [[ "${AWS_IMAGE_NAME}" =~ "${K}" ]] ; then
            AWS_INSTANCE_USER=${V}
            break
        fi
    done
fi

AWS_INSTANCE_TYPE=${AWS_INSTANCE_TYPE=${_DEFAULT_INSTANCE_TYPE}}

MULTIPLEX=${MULTIPLEX=${_DEFAULT_MULTIPLEX}}

TAGS=(
"Name::${AWS_NAME_INSTANCE}"
"User::${USER}"
"Hostname::$(hostname)"
)

if [ ! -z "${TRIGRAM}" ] ; then
    TAGS+=("Trigram::${TRIGRAM}")
fi

_TAGS="["
for index in "${TAGS[@]}" ; do
    K="${index%%::*}"
    V="${index##*::}"
    _TAGS+="{Key=${K},Value=${V}},"
    [ "${K}" != "Name" ] && __tags+="${K}=${V}, "
done
_TAGS=${_TAGS%*,}"]"
__tags=${__tags%*, }

AWS_TAGS="ResourceType=instance,Tags=$_TAGS"
AWS_FINAL_STATE=${AWS_FINAL_STATE=${_DEFAULT_FINAL_STATE}}
AWS_USER_DATA=${AWS_USER_DATA=${_DEFAULT_USER_DATA}}
AWS_DISABLE_HOST_CHECKING="-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=quiet"

if [[ ! -z "${AWS_PEM}" ]]; then
PEM_SSH="-i ${AWS_PEM}"
fi

echo "${green}----------------------------------------------------------${normal}"
echo "${green}EC2 Name: ${AWS_NAME_INSTANCE}${normal}"
echo "${green}Region:   ${AWS_REGION}${normal}"
echo "${green}Type:     ${AWS_INSTANCE_TYPE}${normal}"
echo "${green}Image Id: ${AWS_IMAGE_ID} (${AWS_IMAGE_NAME})${normal}"
echo "${green}Key name: ${AWS_KEY_NAME}${normal}"
echo "${green}Tags:     ${__tags}${normal}"
echo "${green}----------------------------------------------------------${normal}"

trap_with_arg() {
    func="$1" ; shift
    for sig ; do
        trap "$func $sig" "$sig"
    done
}

function abort() {
    echo -e "\n${red}Abort${normal}"
    exit -1
}

function nb_of_instance() {
    pgrep -fa bash | sed 's/\\\n/ /g' | grep ssh-ec2 | wc -l || true
}

function finish() {
    trap - EXIT
    trap_with_arg abort INT
    [[ "${DEBUG}" == y ]] && read -p "Confirm FINISH ?"

    # Only the last instance of ssh manage the final state
    if [[ "${nb_of_instance}" < 2 ]] ; then
        # Stop the instance
        case "${AWS_FINAL_STATE}" in
            stop)
              echo -e "${red}Stop instance...${normal} \c"
              aws --region ${AWS_REGION} ec2 stop-instances --instance-ids ${AWS_INSTANCE_ID} ${AWS_DRY} --output text ${AWS_DRY} > /dev/null
              if [[ -z "${AWS_DRY}" ]]; then
                  while STATE=$(aws --region ${AWS_REGION} ec2 describe-instances \
                      --instance-ids $AWS_INSTANCE_ID \
                      --output text \
                      --query 'Reservations[*].Instances[*].State.Name');
                    test "$STATE" != "stopped" -a "$STATE" != "terminated"; do
                    sleep 3;
                  done;
                  echo -e "${red}done${normal}"
              fi
              ;;
            terminate)
                echo -e "${yellow}Terminate instance... ${normal}\c"
                aws --region ${AWS_REGION} ec2 terminate-instances --instance-ids ${AWS_INSTANCE_ID} ${AWS_DRY} --output text ${AWS_DRY} > /dev/null
                while STATE=$(aws --region ${AWS_REGION} ec2 describe-instances \
                    --instance-ids $AWS_INSTANCE_ID \
                    --output text \
                    --query 'Reservations[*].Instances[*].State.Name');
                  test "$STATE" != "terminated"; do
                  sleep 3;
                done;
                if [[ "$CREATE_SECURITY_GROUP" != "no" ]] ; then
                    echo -e "${yellow}and security group... ${normal}\c"
                    aws --region ${AWS_REGION} ec2 delete-security-group --group-name ${AWS_SECURITY_GROUP}
                 fi
                echo -e "${yellow}done${normal}"
                ;;
            *)
                if [[ $nb_of_instance > 1 ]] ; then
                    AWS_FINAL_STATE=leave
                    echo -e "${red}WARNING: Another connexion to EC2 instance is alive. The AWS EC instance is active${normal}"
                else
                    echo -e "${red}WARNING: The AWS EC instance ${AWS_NAME_INSTANCE} is alive${normal}" >&2
                fi
                ;;
        esac
    fi
    if [  "$1" != "EXIT" ] ; then
        exit -1 ;
    else
        exit 0
    fi

}

trap_with_arg finish EXIT

# Search instance
AWS_INSTANCE_ID=$(aws --region ${AWS_REGION} ec2 describe-instances \
  --filters "Name=tag:Name,Values=${AWS_NAME_INSTANCE}" \
    "Name=instance-state-name,Values=pending,running,stopping,stopped" \
   --query 'Reservations[*].Instances[*].InstanceId' --output text)

if [[ -z "$AWS_INSTANCE_ID" ]]; then
    echo ""
    # Create instance
    if [[ "$CREATE_SECURITY_GROUP" != "no" ]] ; then
        AWS_SECURITY_GROUP_ID=$(aws ec2 \
        describe-security-groups \
          --region ${AWS_REGION} \
          --group-names ${AWS_SECURITY_GROUP} \
          --query 'SecurityGroups[*].GroupId' \
          --output text 2>/dev/null || echo "")
        if [[ -z "${AWS_SECURITY_GROUP_ID}" ]]; then
            echo -e "Creating new AWS EC2 security group... \c"
            AWS_SECURITY_GROUP_ID=$(aws ec2 \
            create-security-group \
              --region ${AWS_REGION} \
              --group-name ${AWS_SECURITY_GROUP} \
              --description "SSH-EC2: Security group for ${AWS_NAME_INSTANCE}" \
              ${AWS_DRY} \
              --output text 2>/dev/null)
            echo -e "with port 22 open... \c"
           aws ec2 \
           authorize-security-group-ingress \
              --region ${AWS_REGION} \
              --group-name ${AWS_SECURITY_GROUP} \
              --protocol tcp --port 22 \
              --cidr 0.0.0.0/0 \
              ${AWS_DRY} >/dev/null  2>&1
            echo -e "done"
        fi
    fi
    echo -e "Creating new AWS EC2 instance... \c"
    case "${AWS_FINAL_STATE}" in
        leave|terminate)
            shutdown_mode=terminate
            ;;
        stop)
            shutdown_mode=stop
            ;;
    esac

    if [[ "$AWS_USER_DATA" =~ file:* ]] ; then
        USER_DATA=$AWS_USER_DATA
    else
        tmpfile=$(mktemp /tmp/ssh-ec2.XXXXXX)
        echo "${AWS_USER_DATA}" >$tmpfile
        USER_DATA="file://$tmpfile"
    fi
    [[ "${DEBUG}" == y ]] && set -x
    AWS_INSTANCE_ID=$(aws \
      ec2 run-instances \
      --region ${AWS_REGION} \
      --instance-type ${AWS_INSTANCE_TYPE} \
      ${AWS_IAM_INSTANCE_PROFILE} \
      --security-groups ${AWS_SECURITY_GROUP} \
      --tag-specifications "${AWS_TAGS}" \
      --image-id ${AWS_IMAGE_ID} \
      --key-name ${AWS_KEY_NAME} \
      --instance-initiated-shutdown-behavior ${shutdown_mode} \
      --user-data ${USER_DATA} \
      --output text --query 'Instances[*].InstanceId')
    [[ "${DEBUG}" == y ]] && set +x
    if [[ -z "${AWS_INSTANCE_ID}" ]] ; then
        echo -e "${red}ERROR${normal}: Impossible to create instance" >&2
        exit 1
    fi
    echo -e "starting... \c"
    aws --region ${AWS_REGION} ec2 wait instance-status-ok --instance-ids ${AWS_INSTANCE_ID}
    echo -e "done"
    [ -e "$tmpfile" ] && rm "$tmpfile"
fi
STATE=$(aws --region ${AWS_REGION} ec2 describe-instances --instance-ids $AWS_INSTANCE_ID --output text --query 'Reservations[*].Instances[*].State.Name')
if [ "$STATE" == "stopping" -o "$STATE" == "stopped" ]; then
    echo ""
    echo -e "Start instance... \c"
      while STATE=$(aws --region ${AWS_REGION} ec2 describe-instances \
          --instance-ids $AWS_INSTANCE_ID \
          --output text \
          --query 'Reservations[*].Instances[*].State.Name');
        test "$STATE" != "stopped"; do
        sleep 3;
      done;
    aws --region ${AWS_REGION} ec2 start-instances --instance-ids $AWS_INSTANCE_ID ${AWS_DRY} >/dev/null
    aws --region ${AWS_REGION} ec2 wait instance-running --instance-ids ${AWS_INSTANCE_ID}
    echo -e "done"
fi

# Synchronize files with the new instance
aws --region ${AWS_REGION} ec2 wait instance-running --instance-ids ${AWS_INSTANCE_ID}
AWS_HOST=${AWS_INSTANCE_USER}@$(aws --region ${AWS_REGION} ec2 describe-instances \
  --instance-ids $AWS_INSTANCE_ID \
  --output text \
  --query 'Reservations[*].Instances[*].NetworkInterfaces[*].Association.PublicIp')

[[ "${DEBUG}" == y ]] && echo "nb_of_instance=$nb_of_instance"

if [[ "$nb_of_instance" < 2 && -z "${NO_RSYNC_BEGIN}" ]] ; then
    echo -e "Synchronizes current directory (except files in .rsyncignore)... \c"
    [[ -e .rsyncignore ]] && EXCLUDE=$(sed -E 's/^(.*)/ --exclude '\''\1'\''/' .rsyncignore) || EXCLUDE="-v"
    # TODO: use file and add with --exclude-from ???
    [[ "${DEBUG}" == y ]] && set -x
    echo $EXCLUDE | xargs rsync -vz -r \
      -e "ssh ${PEM_SSH} ${AWS_DISABLE_HOST_CHECKING} -o LogLevel=quiet" \
      ./ ${AWS_HOST}:~/${AWS_RSYNC_DIR} \
      --archive \
      --modify-window=1 \
      --update \
      ${RSYNC_QUIET} \
      --copy-links
    [[ "${DEBUG}" == y ]] && set +x
else
    echo -e "${yellow}Warning: No rsync (other ssh-ec2 session ?)${normal}"
fi

_CD="[[ -e \"${AWS_RSYNC_DIR}\" ]] && cd \"${AWS_RSYNC_DIR}\""
_CMD="$*"

case "${MULTIPLEX}" in
    screen)
        _TERM=-t
        if [[ "$SSH_DETACH" == y ]]; then
            _CMD="${_CD} ; screen -dmS ${AWS_NAME_INSTANCE} '$_CMD'"
        else
            if [ -z "$_CMD" ] ; then
                _TERM=-t
                _CMD="${_CD} ; screen -rS ${AWS_NAME_INSTANCE} || screen -S ${AWS_NAME_INSTANCE}"
            else
                _TERM=-t
                _CMD="${_CD} ; screen -S ${AWS_NAME_INSTANCE} $SHELL -c '$_CMD'"
            fi
        fi
        ;;
    tmux)
        _TERM=-t
        # ./ssh-ec2 --detach 'for ((;;)); do echo "break"; sleep 2; done'
        if [[ "$SSH_DETACH" == y ]]; then
            _CMD="${_CD} ; tmux new-session -s ${AWS_NAME_INSTANCE} -d '$_CMD'"
        else
            #_CMD="tmux new-session -s ${AWS_NAME_INSTANCE} '$_CMD""'"
            if [ -z "$_CMD" ] ; then
              _TERM=-t
              _CMD="${_CD} ; tmux a -t ${AWS_NAME_INSTANCE} || tmux new-session -s ${AWS_NAME_INSTANCE} "
            else
                _TERM=-t
                _CMD="${_CD} ; tmux new-session -s ${AWS_NAME_INSTANCE} '$_CMD'"
            fi
        fi
        ;;
      *)
        if [[ "$SSH_DETACH" == y ]]; then
            echo "${red}ERROR${normal}: Impossible to detach session without MULTIPLEX" >&2
            exit 1
        else
          _TERM=-t
          if [ -z "$_CMD" ] ; then
            _CMD="${_CD} ; exec \$SHELL"
          else
            _TERM=-t
            _CMD="${_CD} ; ${_CMD}"
          fi
        fi
        ;;
esac

echo ""
echo "ssh ${AWS_HOST} ..."
if [[ $DEBUG == y ]] ; then
    ( set -x; ssh ${PEM_SSH} ${AWS_HOST} ${AWS_DISABLE_HOST_CHECKING} ${_TERM} ${SSH_PARAMS} "${_CMD}" )
else
    ssh ${PEM_SSH} ${AWS_HOST} ${AWS_DISABLE_HOST_CHECKING} ${_TERM} ${SSH_PARAMS} "${_CMD}"
fi

# Reverce synchronisation
[[ "${DEBUG}" == y ]] && echo "nb_of_instance=$nb_of_instance"
if [[ "$nb_of_instance" < 2 && -z "${NO_RSYNC_END}" ]] ; then
    echo -e "Synchronizes result... \c"
    [[ -e .rsyncignore ]] && EXCLUDE=$(sed -E 's/^(.*)/ --exclude '\''\1'\''/' .rsyncignore) || EXCLUDE="-v"
    [[ "${DEBUG}" == y ]] && set -x
    echo $EXCLUDE | xargs rsync -vza -r \
      -e "ssh ${PEM_SSH} -o StrictHostKeyChecking=no -o LogLevel=quiet" \
      ${AWS_HOST}:~/${AWS_RSYNC_DIR}/ ./ \
      ${RSYNC_QUIET} \
      --update \
      $([ "$AWS_DRY" != "" ] && echo "-n" ) \
      --ignore-times
    [[ "${DEBUG}" == y ]] && set +x
    echo -e "done"
else
    echo -e "${yellow}Warning: No rsync${normal}"
fi

